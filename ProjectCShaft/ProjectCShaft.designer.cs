#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectCShaft
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProjectCShaft")]
	public partial class ProjectCShaftDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertTable_Bida(Table_Bida instance);
    partial void UpdateTable_Bida(Table_Bida instance);
    partial void DeleteTable_Bida(Table_Bida instance);
    #endregion
		
		public ProjectCShaftDataContext() : 
				base(global::ProjectCShaft.Properties.Settings.Default.ProjectCShaftConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectCShaftDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectCShaftDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectCShaftDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectCShaftDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<Table_Bida> Table_Bidas
		{
			get
			{
				return this.GetTable<Table_Bida>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<bool> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit")]
		public System.Nullable<bool> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idMenu;
		
		private string _nameMenu;
		
		private string _unitMenu;
		
		private System.Nullable<double> _priceMenu;
		
		private string _descriptionMenu;
		
		private System.Nullable<bool> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMenuChanging(int value);
    partial void OnidMenuChanged();
    partial void OnnameMenuChanging(string value);
    partial void OnnameMenuChanged();
    partial void OnunitMenuChanging(string value);
    partial void OnunitMenuChanged();
    partial void OnpriceMenuChanging(System.Nullable<double> value);
    partial void OnpriceMenuChanged();
    partial void OndescriptionMenuChanging(string value);
    partial void OndescriptionMenuChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    #endregion
		
		public Menu()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMenu", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idMenu
		{
			get
			{
				return this._idMenu;
			}
			set
			{
				if ((this._idMenu != value))
				{
					this.OnidMenuChanging(value);
					this.SendPropertyChanging();
					this._idMenu = value;
					this.SendPropertyChanged("idMenu");
					this.OnidMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameMenu", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string nameMenu
		{
			get
			{
				return this._nameMenu;
			}
			set
			{
				if ((this._nameMenu != value))
				{
					this.OnnameMenuChanging(value);
					this.SendPropertyChanging();
					this._nameMenu = value;
					this.SendPropertyChanged("nameMenu");
					this.OnnameMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unitMenu", DbType="NVarChar(20)")]
		public string unitMenu
		{
			get
			{
				return this._unitMenu;
			}
			set
			{
				if ((this._unitMenu != value))
				{
					this.OnunitMenuChanging(value);
					this.SendPropertyChanging();
					this._unitMenu = value;
					this.SendPropertyChanged("unitMenu");
					this.OnunitMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceMenu", DbType="Float")]
		public System.Nullable<double> priceMenu
		{
			get
			{
				return this._priceMenu;
			}
			set
			{
				if ((this._priceMenu != value))
				{
					this.OnpriceMenuChanging(value);
					this.SendPropertyChanging();
					this._priceMenu = value;
					this.SendPropertyChanged("priceMenu");
					this.OnpriceMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descriptionMenu", DbType="NVarChar(255)")]
		public string descriptionMenu
		{
			get
			{
				return this._descriptionMenu;
			}
			set
			{
				if ((this._descriptionMenu != value))
				{
					this.OndescriptionMenuChanging(value);
					this.SendPropertyChanging();
					this._descriptionMenu = value;
					this.SendPropertyChanged("descriptionMenu");
					this.OndescriptionMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit")]
		public System.Nullable<bool> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table_Bida")]
	public partial class Table_Bida : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _idTable;
		
		private string _nameTable;
		
		private string _typeTable;
		
		private double _priceTable;
		
		private System.Nullable<bool> _statusTable;
		
		private string _description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTableChanging(string value);
    partial void OnidTableChanged();
    partial void OnnameTableChanging(string value);
    partial void OnnameTableChanged();
    partial void OntypeTableChanging(string value);
    partial void OntypeTableChanged();
    partial void OnpriceTableChanging(double value);
    partial void OnpriceTableChanged();
    partial void OnstatusTableChanging(System.Nullable<bool> value);
    partial void OnstatusTableChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Table_Bida()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTable", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string idTable
		{
			get
			{
				return this._idTable;
			}
			set
			{
				if ((this._idTable != value))
				{
					this.OnidTableChanging(value);
					this.SendPropertyChanging();
					this._idTable = value;
					this.SendPropertyChanged("idTable");
					this.OnidTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameTable", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nameTable
		{
			get
			{
				return this._nameTable;
			}
			set
			{
				if ((this._nameTable != value))
				{
					this.OnnameTableChanging(value);
					this.SendPropertyChanging();
					this._nameTable = value;
					this.SendPropertyChanged("nameTable");
					this.OnnameTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeTable", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string typeTable
		{
			get
			{
				return this._typeTable;
			}
			set
			{
				if ((this._typeTable != value))
				{
					this.OntypeTableChanging(value);
					this.SendPropertyChanging();
					this._typeTable = value;
					this.SendPropertyChanged("typeTable");
					this.OntypeTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceTable", DbType="Float NOT NULL")]
		public double priceTable
		{
			get
			{
				return this._priceTable;
			}
			set
			{
				if ((this._priceTable != value))
				{
					this.OnpriceTableChanging(value);
					this.SendPropertyChanging();
					this._priceTable = value;
					this.SendPropertyChanged("priceTable");
					this.OnpriceTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusTable", DbType="Bit")]
		public System.Nullable<bool> statusTable
		{
			get
			{
				return this._statusTable;
			}
			set
			{
				if ((this._statusTable != value))
				{
					this.OnstatusTableChanging(value);
					this.SendPropertyChanging();
					this._statusTable = value;
					this.SendPropertyChanged("statusTable");
					this.OnstatusTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(1)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
